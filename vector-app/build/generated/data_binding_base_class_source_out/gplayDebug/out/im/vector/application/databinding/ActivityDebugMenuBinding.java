// Generated by view binder compiler. Do not edit!
package im.vector.application.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import im.vector.app.core.ui.views.QrCodeImageView;
import im.vector.application.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDebugMenuBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final CoordinatorLayout coordinatorLayout;

  @NonNull
  public final Button debugAnalytics;

  @NonNull
  public final Button debugFeatures;

  @NonNull
  public final Button debugJitsi;

  @NonNull
  public final Button debugMemoryLeaks;

  @NonNull
  public final Button debugOpenButtonStylesDark;

  @NonNull
  public final Button debugOpenButtonStylesLight;

  @NonNull
  public final Button debugPermission;

  @NonNull
  public final Button debugPrivateSetting;

  @NonNull
  public final QrCodeImageView debugQrCode;

  @NonNull
  public final Button debugScanQrCode;

  @NonNull
  public final Button debugShowSasEmoji;

  @NonNull
  public final Button debugTestCrash;

  @NonNull
  public final Button debugTestMaterialThemeDarkDefault;

  @NonNull
  public final Button debugTestMaterialThemeDarkTest;

  @NonNull
  public final Button debugTestMaterialThemeDarkVector;

  @NonNull
  public final Button debugTestMaterialThemeLightDefault;

  @NonNull
  public final Button debugTestMaterialThemeLightTest;

  @NonNull
  public final Button debugTestMaterialThemeLightVector;

  @NonNull
  public final Button debugTestNotification;

  @NonNull
  public final Button debugTestTextViewDark;

  @NonNull
  public final Button debugTestTextViewLight;

  @NonNull
  public final Button debugTestTextViewLink;

  @NonNull
  public final ScrollView scrollView2;

  private ActivityDebugMenuBinding(@NonNull CoordinatorLayout rootView,
      @NonNull CoordinatorLayout coordinatorLayout, @NonNull Button debugAnalytics,
      @NonNull Button debugFeatures, @NonNull Button debugJitsi, @NonNull Button debugMemoryLeaks,
      @NonNull Button debugOpenButtonStylesDark, @NonNull Button debugOpenButtonStylesLight,
      @NonNull Button debugPermission, @NonNull Button debugPrivateSetting,
      @NonNull QrCodeImageView debugQrCode, @NonNull Button debugScanQrCode,
      @NonNull Button debugShowSasEmoji, @NonNull Button debugTestCrash,
      @NonNull Button debugTestMaterialThemeDarkDefault,
      @NonNull Button debugTestMaterialThemeDarkTest,
      @NonNull Button debugTestMaterialThemeDarkVector,
      @NonNull Button debugTestMaterialThemeLightDefault,
      @NonNull Button debugTestMaterialThemeLightTest,
      @NonNull Button debugTestMaterialThemeLightVector, @NonNull Button debugTestNotification,
      @NonNull Button debugTestTextViewDark, @NonNull Button debugTestTextViewLight,
      @NonNull Button debugTestTextViewLink, @NonNull ScrollView scrollView2) {
    this.rootView = rootView;
    this.coordinatorLayout = coordinatorLayout;
    this.debugAnalytics = debugAnalytics;
    this.debugFeatures = debugFeatures;
    this.debugJitsi = debugJitsi;
    this.debugMemoryLeaks = debugMemoryLeaks;
    this.debugOpenButtonStylesDark = debugOpenButtonStylesDark;
    this.debugOpenButtonStylesLight = debugOpenButtonStylesLight;
    this.debugPermission = debugPermission;
    this.debugPrivateSetting = debugPrivateSetting;
    this.debugQrCode = debugQrCode;
    this.debugScanQrCode = debugScanQrCode;
    this.debugShowSasEmoji = debugShowSasEmoji;
    this.debugTestCrash = debugTestCrash;
    this.debugTestMaterialThemeDarkDefault = debugTestMaterialThemeDarkDefault;
    this.debugTestMaterialThemeDarkTest = debugTestMaterialThemeDarkTest;
    this.debugTestMaterialThemeDarkVector = debugTestMaterialThemeDarkVector;
    this.debugTestMaterialThemeLightDefault = debugTestMaterialThemeLightDefault;
    this.debugTestMaterialThemeLightTest = debugTestMaterialThemeLightTest;
    this.debugTestMaterialThemeLightVector = debugTestMaterialThemeLightVector;
    this.debugTestNotification = debugTestNotification;
    this.debugTestTextViewDark = debugTestTextViewDark;
    this.debugTestTextViewLight = debugTestTextViewLight;
    this.debugTestTextViewLink = debugTestTextViewLink;
    this.scrollView2 = scrollView2;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDebugMenuBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDebugMenuBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_debug_menu, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDebugMenuBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      CoordinatorLayout coordinatorLayout = (CoordinatorLayout) rootView;

      id = R.id.debug_analytics;
      Button debugAnalytics = ViewBindings.findChildViewById(rootView, id);
      if (debugAnalytics == null) {
        break missingId;
      }

      id = R.id.debug_features;
      Button debugFeatures = ViewBindings.findChildViewById(rootView, id);
      if (debugFeatures == null) {
        break missingId;
      }

      id = R.id.debug_jitsi;
      Button debugJitsi = ViewBindings.findChildViewById(rootView, id);
      if (debugJitsi == null) {
        break missingId;
      }

      id = R.id.debug_memory_leaks;
      Button debugMemoryLeaks = ViewBindings.findChildViewById(rootView, id);
      if (debugMemoryLeaks == null) {
        break missingId;
      }

      id = R.id.debug_open_button_styles_dark;
      Button debugOpenButtonStylesDark = ViewBindings.findChildViewById(rootView, id);
      if (debugOpenButtonStylesDark == null) {
        break missingId;
      }

      id = R.id.debug_open_button_styles_light;
      Button debugOpenButtonStylesLight = ViewBindings.findChildViewById(rootView, id);
      if (debugOpenButtonStylesLight == null) {
        break missingId;
      }

      id = R.id.debug_permission;
      Button debugPermission = ViewBindings.findChildViewById(rootView, id);
      if (debugPermission == null) {
        break missingId;
      }

      id = R.id.debug_private_setting;
      Button debugPrivateSetting = ViewBindings.findChildViewById(rootView, id);
      if (debugPrivateSetting == null) {
        break missingId;
      }

      id = R.id.debug_qr_code;
      QrCodeImageView debugQrCode = ViewBindings.findChildViewById(rootView, id);
      if (debugQrCode == null) {
        break missingId;
      }

      id = R.id.debug_scan_qr_code;
      Button debugScanQrCode = ViewBindings.findChildViewById(rootView, id);
      if (debugScanQrCode == null) {
        break missingId;
      }

      id = R.id.debug_show_sas_emoji;
      Button debugShowSasEmoji = ViewBindings.findChildViewById(rootView, id);
      if (debugShowSasEmoji == null) {
        break missingId;
      }

      id = R.id.debug_test_crash;
      Button debugTestCrash = ViewBindings.findChildViewById(rootView, id);
      if (debugTestCrash == null) {
        break missingId;
      }

      id = R.id.debug_test_material_theme_dark_default;
      Button debugTestMaterialThemeDarkDefault = ViewBindings.findChildViewById(rootView, id);
      if (debugTestMaterialThemeDarkDefault == null) {
        break missingId;
      }

      id = R.id.debug_test_material_theme_dark_test;
      Button debugTestMaterialThemeDarkTest = ViewBindings.findChildViewById(rootView, id);
      if (debugTestMaterialThemeDarkTest == null) {
        break missingId;
      }

      id = R.id.debug_test_material_theme_dark_vector;
      Button debugTestMaterialThemeDarkVector = ViewBindings.findChildViewById(rootView, id);
      if (debugTestMaterialThemeDarkVector == null) {
        break missingId;
      }

      id = R.id.debug_test_material_theme_light_default;
      Button debugTestMaterialThemeLightDefault = ViewBindings.findChildViewById(rootView, id);
      if (debugTestMaterialThemeLightDefault == null) {
        break missingId;
      }

      id = R.id.debug_test_material_theme_light_test;
      Button debugTestMaterialThemeLightTest = ViewBindings.findChildViewById(rootView, id);
      if (debugTestMaterialThemeLightTest == null) {
        break missingId;
      }

      id = R.id.debug_test_material_theme_light_vector;
      Button debugTestMaterialThemeLightVector = ViewBindings.findChildViewById(rootView, id);
      if (debugTestMaterialThemeLightVector == null) {
        break missingId;
      }

      id = R.id.debug_test_notification;
      Button debugTestNotification = ViewBindings.findChildViewById(rootView, id);
      if (debugTestNotification == null) {
        break missingId;
      }

      id = R.id.debug_test_text_view_dark;
      Button debugTestTextViewDark = ViewBindings.findChildViewById(rootView, id);
      if (debugTestTextViewDark == null) {
        break missingId;
      }

      id = R.id.debug_test_text_view_light;
      Button debugTestTextViewLight = ViewBindings.findChildViewById(rootView, id);
      if (debugTestTextViewLight == null) {
        break missingId;
      }

      id = R.id.debug_test_text_view_link;
      Button debugTestTextViewLink = ViewBindings.findChildViewById(rootView, id);
      if (debugTestTextViewLink == null) {
        break missingId;
      }

      id = R.id.scrollView2;
      ScrollView scrollView2 = ViewBindings.findChildViewById(rootView, id);
      if (scrollView2 == null) {
        break missingId;
      }

      return new ActivityDebugMenuBinding((CoordinatorLayout) rootView, coordinatorLayout,
          debugAnalytics, debugFeatures, debugJitsi, debugMemoryLeaks, debugOpenButtonStylesDark,
          debugOpenButtonStylesLight, debugPermission, debugPrivateSetting, debugQrCode,
          debugScanQrCode, debugShowSasEmoji, debugTestCrash, debugTestMaterialThemeDarkDefault,
          debugTestMaterialThemeDarkTest, debugTestMaterialThemeDarkVector,
          debugTestMaterialThemeLightDefault, debugTestMaterialThemeLightTest,
          debugTestMaterialThemeLightVector, debugTestNotification, debugTestTextViewDark,
          debugTestTextViewLight, debugTestTextViewLink, scrollView2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
