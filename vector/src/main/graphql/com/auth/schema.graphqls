type CronjobUnsubscribeUserRes {
    message: String

    status: Int
}

type FailTradeOutput {
    updated: Boolean
}

input FailTradePayload {
    message: String
    tradeId: Int!
}

input GetNonePayload {
    publicKey: String!
}

type GetNoneRes {
    nonce: Int
}

type Mutation {
    createOffer(
        payload: CreateOfferPayload!
    ): CreateOfferOutput
}

input CreateOfferPayload {
    trade: Trade!
    publicKey: String!
    signature: String!
}

input Trade {
    recipient_address: String!
    recipient_token_address: String!
    recipient_token_amount: String!
    recipient_user_id: Int!
    sending_token_address: String!
    sending_token_amount: String!
}

type CreateOfferOutput {
    trade_id: Int!
}

input CancelOfferPayload {
    signature: String
    tradeId: Int!
}

type CancelOfferOutput {
    updated: Boolean
}

input AcceptTradePayload {
    tradeId: Int!
}

type AcceptTradeOutput {
    updated: Boolean!
}

input InitializeTradePayload{
    tradeId: Int!
}

type InitializeTradeOutput {
    updated: Boolean!
}

input ExchangeTradePayload{
    signature: String!
    tradeId: Int!
}

type ExchangeTradeOutput {
    updated: Boolean!
}

type User {
    username: String!
}
type UserBySendingUserId {
    username: String!
}

type TradeByPkOutput {
    id:Int!
    recipient_address: String!
    recipient_token_address: String!
    recipient_token_amount: String!
    recipient_user_id: Int!
    sending_token_address: String!
    sending_token_amount: String!
    sending_address: String!
    sending_user_id: String!
    created_at: String!
    updated_at: String!
    message: String
    status: String!
    user:User!
    userBySendingUserId:UserBySendingUserId!
}

input ExchangePayload {
    initializer: String!
    taker_token_mint: String!
    initializer_token_mint: String!
}

type ExchangeResp {
    transaction_base_64: String!
}

input WalletByUsernameInput {
    username: String!
}


"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int

    _gt: Int

    _gte: Int

    _in: [Int!]

    _is_null: Boolean

    _lt: Int

    _lte: Int

    _neq: Int

    _nin: [Int!]
}

type JoinWhiteListResponse {
    joined: Boolean!
}

type JoinWhitelistFreeRepsonse {
    joined: Boolean!
}

input JoinWithAffiliateInput {
    influencer_address: String!

    user_address: String!
}

type JoinWithAffiliateOutput {
    joined: Boolean!
}

input LoginPayload {
    publicKey: String!

    signature: String!
}

type LoginRes {
    accessToken: String

    password: String

    username: String
}

input WalletInput {
    where : wallets_bool_exp
}

input wallets_bool_exp {
    user_id: Int_comparison_exp!
}


type WalletsRes {
    address: String!
}

input InitializePayload {
    recipient_token_address: String!
    sending_token_address: String!
    ui_taker_amount: Int!
    ui_initializer_amount: Int!
}

type InitializeResp {
    transaction_base_64: String!
}


input CancelPayload {
    taker_token_mint: String!
    intializer_token_mint: String!
}

type CancelResp {
    transaction_base_64: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String

    _gt: String

    _gte: String

    """
    does the column match the given case-insensitive pattern
    """
    _ilike: String

    _in: [String!]

    """
    does the column match the given POSIX regular expression, case insensitive
    """
    _iregex: String

    _is_null: Boolean

    """
    does the column match the given pattern
    """
    _like: String

    _lt: String

    _lte: String

    _neq: String

    """
    does the column NOT match the given case-insensitive pattern
    """
    _nilike: String

    _nin: [String!]

    """
    does the column NOT match the given POSIX regular expression, case insensitive
    """
    _niregex: String

    """
    does the column NOT match the given pattern
    """
    _nlike: String

    """
    does the column NOT match the given POSIX regular expression, case sensitive
    """
    _nregex: String

    """
    does the column NOT match the given SQL regular expression
    """
    _nsimilar: String

    """
    does the column match the given POSIX regular expression, case sensitive
    """
    _regex: String

    """
    does the column match the given SQL regular expression
    """
    _similar: String
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
    _eq: float8

    _gt: float8

    _gte: float8

    _in: [float8!]

    _is_null: Boolean

    _lt: float8

    _lte: float8

    _neq: float8

    _nin: [float8!]
}

"""
mutation root
"""
type mutation_root {
    JoinWithAffiliate(payload: JoinWithAffiliateInput!): JoinWithAffiliateOutput

    authenticate(payload: LoginPayload!): LoginRes

    failTrade(payload: FailTradePayload!): FailTradeOutput

    joinWhitelist(token: String!): JoinWhiteListResponse

    joinWhitelistFree(address: String!): JoinWhitelistFreeRepsonse!

    createOffer(payload: CreateOfferPayload!): CreateOfferOutput

    cancelOffer(payload: CancelOfferPayload!): CancelOfferOutput

    acceptTrade(payload: AcceptTradePayload!): AcceptTradeOutput

    exchangeTrade(payload: ExchangeTradePayload!): ExchangeTradeOutput

    initializeTrade(payload: InitializeTradePayload!): InitializeTradeOutput

    buildInitializeTransaction(payload: InitializePayload!): InitializeResp

    buildExchangeTransaction(payload: ExchangePayload!): ExchangeResp

    buildCancelTransaction(payload: CancelPayload!): CancelResp
}

type Wallet {
    id: ID!
    user: User!
    address: String!
    user_id: ID!
}

"""
column ordering options
"""
enum order_by {
    """
    in ascending order, nulls last
    """
    asc

    """
    in ascending order, nulls first
    """
    asc_nulls_first

    """
    in ascending order, nulls last
    """
    asc_nulls_last

    """
    in descending order, nulls first
    """
    desc

    """
    in descending order, nulls first
    """
    desc_nulls_first

    """
    in descending order, nulls last
    """
    desc_nulls_last
}

type query_root {

    GetWalletByUsername(username: String!): [Wallet!]!

    wallets(where : wallets_bool_exp) : [WalletsRes]

    cronjobUserHold: CronjobUnsubscribeUserRes

    cronjobUserSubscribe: CronjobUnsubscribeUserRes

    getNonce(payload: GetNonePayload!): GetNoneRes

    """
    fetch data from the table: "space_creation_whitelist"
    """
    space_creation_whitelist("distinct select on columns" distinct_on: [space_creation_whitelist_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [space_creation_whitelist_order_by!], "filter the rows returned" where: space_creation_whitelist_bool_exp): [space_creation_whitelist!]!

    """
    fetch data from the table: "space_creation_whitelist" using primary key columns
    """
    space_creation_whitelist_by_pk(address: String!): space_creation_whitelist

    """
    fetch data from the table: "token_rates"
    """
    token_rates("distinct select on columns" distinct_on: [token_rates_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [token_rates_order_by!], "filter the rows returned" where: token_rates_bool_exp): [token_rates!]!

    """
    fetch data from the table: "token_rates" using primary key columns
    """
    token_rates_by_pk(symbol: String!): token_rates

    """
    fetch data from the table: "whitelist"
    """
    whitelist("distinct select on columns" distinct_on: [whitelist_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [whitelist_order_by!], "filter the rows returned" where: whitelist_bool_exp): [whitelist!]!

    """
    fetch data from the table: "whitelist" using primary key columns
    """
    whitelist_by_pk(id: Int!): whitelist

    users_by_pk(id: Int) : GetNoneRes

    trades_by_pk(id: Int) : TradeByPkOutput
}

"""
columns and relationships of "space_creation_whitelist"
"""
type space_creation_whitelist {
    address: String!
}

"""
Boolean expression to filter rows from the table "space_creation_whitelist". All fields are combined with a logical 'AND'.
"""
input space_creation_whitelist_bool_exp {
    _and: [space_creation_whitelist_bool_exp!]

    _not: space_creation_whitelist_bool_exp

    _or: [space_creation_whitelist_bool_exp!]

    address: String_comparison_exp
}

"""
Ordering options when selecting data from "space_creation_whitelist".
"""
input space_creation_whitelist_order_by {
    address: order_by
}

"""
select columns of table "space_creation_whitelist"
"""
enum space_creation_whitelist_select_column {
    """
    column name
    """
    address
}

type subscription_root {
    """
    fetch data from the table: "space_creation_whitelist"
    """
    space_creation_whitelist("distinct select on columns" distinct_on: [space_creation_whitelist_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [space_creation_whitelist_order_by!], "filter the rows returned" where: space_creation_whitelist_bool_exp): [space_creation_whitelist!]!

    """
    fetch data from the table: "space_creation_whitelist" using primary key columns
    """
    space_creation_whitelist_by_pk(address: String!): space_creation_whitelist

    """
    fetch data from the table: "token_rates"
    """
    token_rates("distinct select on columns" distinct_on: [token_rates_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [token_rates_order_by!], "filter the rows returned" where: token_rates_bool_exp): [token_rates!]!

    """
    fetch data from the table: "token_rates" using primary key columns
    """
    token_rates_by_pk(symbol: String!): token_rates

    """
    fetch data from the table: "whitelist"
    """
    whitelist("distinct select on columns" distinct_on: [whitelist_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [whitelist_order_by!], "filter the rows returned" where: whitelist_bool_exp): [whitelist!]!

    """
    fetch data from the table: "whitelist" using primary key columns
    """
    whitelist_by_pk(id: Int!): whitelist
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz

    _gt: timestamptz

    _gte: timestamptz

    _in: [timestamptz!]

    _is_null: Boolean

    _lt: timestamptz

    _lte: timestamptz

    _neq: timestamptz

    _nin: [timestamptz!]
}

"""
columns and relationships of "token_rates"
"""
type token_rates {
    created_at: timestamptz

    name: String!

    rate: float8!

    symbol: String!

    token_address: String!

    updated_at: timestamptz
}

"""
Boolean expression to filter rows from the table "token_rates". All fields are combined with a logical 'AND'.
"""
input token_rates_bool_exp {
    _and: [token_rates_bool_exp!]

    _not: token_rates_bool_exp

    _or: [token_rates_bool_exp!]

    created_at: timestamptz_comparison_exp

    name: String_comparison_exp

    rate: float8_comparison_exp

    symbol: String_comparison_exp

    token_address: String_comparison_exp

    updated_at: timestamptz_comparison_exp
}

"""
Ordering options when selecting data from "token_rates".
"""
input token_rates_order_by {
    created_at: order_by

    name: order_by

    rate: order_by

    symbol: order_by

    token_address: order_by

    updated_at: order_by
}

"""
select columns of table "token_rates"
"""
enum token_rates_select_column {
    """
    column name
    """
    created_at

    """
    column name
    """
    name

    """
    column name
    """
    rate

    """
    column name
    """
    symbol

    """
    column name
    """
    token_address

    """
    column name
    """
    updated_at
}

"""
columns and relationships of "whitelist"
"""
type whitelist {
    address: String!

    id: Int!
}

"""
Boolean expression to filter rows from the table "whitelist". All fields are combined with a logical 'AND'.
"""
input whitelist_bool_exp {
    _and: [whitelist_bool_exp!]

    _not: whitelist_bool_exp

    _or: [whitelist_bool_exp!]

    address: String_comparison_exp

    id: Int_comparison_exp
}

"""
Ordering options when selecting data from "whitelist".
"""
input whitelist_order_by {
    address: order_by

    id: order_by
}

"""
select columns of table "whitelist"
"""
enum whitelist_select_column {
    """
    column name
    """
    address

    """
    column name
    """
    id
}

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}
